@page "/lifecycle"

@using System.Threading
<h3>Life Cycle</h3>
<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

@count <button @onclick="startCountDown">Start Countdown</button>


<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<ul>
	@foreach (var item in LifeCycle)
	{
		<li>@item</li>
	}
</ul>

@code {
	private int currentCount = 0;
	private int count = 10;
	private void IncrementCount()
	{
		currentCount++;
	}
	List<String> LifeCycle = new List<string>();

	protected override void OnInitialized()
	{
		LifeCycle.Add("OnInitialized");
	}
	protected override void OnAfterRender(bool firstRender)
	{
		LifeCycle.Add("OnAfterRender");
	}
	protected override void OnParametersSet()
	{
		LifeCycle.Add("OnParametersSet");
	}
	protected override async Task OnInitializedAsync()
	{
		LifeCycle.Add("OnInitialized Async");
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		LifeCycle.Add("OnAfterRender Async");
	}

	protected override bool ShouldRender()
	{
		LifeCycle.Add("Should render called");
		return true;
	}


	void startCountDown()
	{
		var timer = new Timer(TimeCallBack, null, 1000, 1000);
	}

	void TimeCallBack(object state)
	{
		if (count > 0)
		{
			count--;

			InvokeAsync(StateHasChanged);
		}
	}
}
