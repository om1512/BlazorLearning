@page "/category/create"
@page "/category/update/{id:int}"
@inject ICategoryRepository _categoryRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@if (IsProcessing)
{
	<div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
		<img src="images/loading.gif" alt="loading" />
	</div>
}
else
{
	<div class="card shadow border-0 mt-4">
		<div class="card-header bg-black bg-gradient ml-0 py-3">
			<div class="row">
				<div class="col-12 text-center">
					<h2 class="text-white py-2">@(Id > 0 ? "Update" : "Create") Category</h2>
				</div>
			</div>
		</div>
		<div class="card-body p-4">
			<EditForm Model="Category" FormName="InsertForm" OnValidSubmit="UpsertCategory">
				<DataAnnotationsValidator />
				<div class="border p-3 mt-4">
					<div class="form-floating py-3 col-12">
						<InputText @bind-Value="Category.Name" class="form-control" id="Name" placeholder="Name"></InputText>
						<label for="Name">Name</label>
						<ValidationMessage For="@(() => Category.Name)" />

					</div>
					<div class="row mt-2">
						<div class="col-6 col-md-3">
							<button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
								<i class="bi bi-floppy2-fill"></i>Update
							</button>
						</div>
						<div class="col-6 col-md-3">
							<a href="category" class="btn btn-secondary form-control" disabled="@IsProcessing">
								<i class="bi bi-arrow-bar-left"></i>Back To List
							</a>
						</div>
					</div>
				</div>
			</EditForm>



		</div>
	</div>
}


@code {
	[Parameter]
	public int Id { get; set; }

	[SupplyParameterFromForm(Name = "InsertForm")]
	private Category Category { get; set; } = new Category();

	public bool IsProcessing { get; set; } = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{

			await LoadCategory();
			IsProcessing = false;
			StateHasChanged();
		}
	}


	private async Task LoadCategory()
	{
		if (Id > 0)
		{
			Category = await _categoryRepository.GetCategory(Id);
			if (Category.Name == string.Empty)
			{
				await failure();
				NavigationManager.NavigateTo("category/create");
			}
		}

	}

	private async Task UpsertCategory()
	{
		IsProcessing = true;
		if (Category.Id == 0)
		{
			// it means it is create
			await _categoryRepository.Create(Category);
			await success();
		}
		else
		{
			// update 
			await _categoryRepository.Update(Category);
			await success();
		}
		IsProcessing = false;
		NavigationManager.NavigateTo("category");
	}

	private async Task success()
	{
		await JsRuntime.ToastrSuccess("Success Notification");
	}

	private async Task failure()
	{
		await JsRuntime.ToastrError("Error Notification");
	}

}
